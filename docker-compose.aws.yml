version: '3.8'
services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file:
      - .env.aws
    # No external ports - nginx handles all external traffic
    volumes:
      - ./api:/app     
    networks:
      - todo-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticmq:
        condition: service_started
    restart: unless-stopped

  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    env_file:
      - .env.aws
    volumes:
      - ./worker:/app
    networks:
      - todo-network
    depends_on:
      - postgres
      - redis
      - elasticmq
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "3001:443"       # Map external 3001 to internal 443 (HTTPS)
      - "3000:80"        # Optional: HTTP redirect port
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro  # Mount SSL certificates
    depends_on:
      - api
    networks:
      - todo-network
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_DB: todo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d todo_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - todo-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - todo-network
    restart: unless-stopped

  elasticmq:
    image: softwaremill/elasticmq-native:latest
    ports:
      - "9324:9324"
      - "9325:9325"
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf:ro
    command: ["-Dconfig.file=/opt/elasticmq.conf"]
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9324/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  todo-network: